# üìö Library Management System (LMS) - Spring Boot Project

This Library Management System is a full-stack backend project built using **Spring Boot**. It manages books, customers, borrowing records, fine calculations, user registration/login, and includes both customer and admin dashboards.

---

## üöÄ Features

- ‚úÖ User registration and login (without Spring Security)
- ‚úÖ CRUD operations for books and customers
- ‚úÖ Borrow and return functionality with auto-fine calculation (after 5 days)
- ‚úÖ Fine tracking per customer
- ‚úÖ Admin and customer dashboards
- ‚úÖ Book search functionality
- ‚úÖ Swagger documentation for testing endpoints
- ‚úÖ Global exception handling and input validation

---

## üß∞ Tech Stack

- Java 17
- Spring Boot 3.3.2
- Spring Data JPA (Hibernate)
- MySQL
- Swagger (springdoc-openapi 2.2.0)
- Jakarta Validation
- Maven

---

## üõ†Ô∏è Getting Started

1. Clone the repo and open it in your IDE.
2. Create a MySQL database (example: `lms`).
3. Update `application.properties` with your DB credentials:
   ```properties
   spring.datasource.url=jdbc:mysql://localhost:3306/lms
   spring.datasource.username=root
   spring.datasource.password=your_password
   spring.jpa.hibernate.ddl-auto=update

‚îú‚îÄ‚îÄ controller
‚îú‚îÄ‚îÄ model
‚îú‚îÄ‚îÄ repository
‚îú‚îÄ‚îÄ service
‚îî‚îÄ‚îÄ exception (global exception handling)


| Method | Endpoint             | Description            |
| ------ | -------------------- | ---------------------- |
| POST   | `/api/auth/register` | Register new user      |
| POST   | `/api/auth/login`    | Login with credentials |


| Method | Endpoint                     | Description              |
| ------ | ---------------------------- | ------------------------ |
| POST   | `/api/customers/add`         | Add a new customer       |
| GET    | `/api/customers`             | Get all customers        |
| GET    | `/api/customers/{id}`        | Get customer by ID       |
| PUT    | `/api/customers/edit/{id}`   | Update customer details  |
| DELETE | `/api/customers/delete/{id}` | Delete customer by ID    |
| GET    | `/api/fines/customer/{id}`   | Get fines for a customer |


| Method | Endpoint                          | Description           |
| ------ | --------------------------------- | --------------------- |
| POST   | `/api/books/add`                  | Add a new book        |
| GET    | `/api/books`                      | Get all books         |
| GET    | `/api/books/{id}`                 | Get book by ID        |
| PUT    | `/api/books/edit/{id}`            | Update book details   |
| DELETE | `/api/books/delete/{id}`          | Delete book by ID     |
| GET    | `/api/books/search?title={query}` | Search books by title |


| Method | Endpoint                                     | Description                             |
| ------ | -------------------------------------------- | --------------------------------------- |
| POST   | `/api/borrow/{bookId}/customer/{customerId}` | Borrow a book (if not already borrowed) |
| PUT    | `/api/return/{bookId}/customer/{customerId}` | Return a book & calculate fine if late  |


| Method | Endpoint                       | Description                              |
| ------ | ------------------------------ | ---------------------------------------- |
| GET    | `/api/dashboard/admin`         | Admin stats: total books/customers/fines |
| GET    | `/api/dashboard/customer/{id}` | Customer-specific stats                  |

Validation & Exception Handling
All input fields are validated using @Valid annotations.

Centralized error handling using @ControllerAdvice.

Custom error messages returned for:

400 (Bad Request)

404 (Not Found)

500 (Internal Server Error)

üí∞ Fine Calculation
A fine of ‚Çπ5 per day is automatically added if a book is returned more than 5 days after borrowing.

Fines are stored and fetched using: